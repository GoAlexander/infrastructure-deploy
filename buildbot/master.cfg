from buildbot.changes.gitpoller import GitPoller
from buildbot.changes.github import GitHubPullrequestPoller
from buildbot.plugins import schedulers, util, steps, worker, reporters

import config

c = BuildmasterConfig = {}

#####
# Add workers
#####
c["workers"] = []
for worker_ in config.WORKERS.values():
    for w_name, prop in worker_.items():
        c["workers"].append(worker.Worker(w_name, config.WORKER_PASS,
                                          properties=prop,
                                          max_builds=1)) # To disable parallel builds on one worker
c["protocols"] = {"pb": {"port": config.WORKER_PORT}}

#####
# Schedulers
#####
c["schedulers"] = [
    schedulers.SingleBranchScheduler(name=config.BUILD_MASTER,
                                     change_filter=util.ChangeFilter(category="our_project",
                                                                     branch="master"),
                                     treeStableTimer=config.BUILDBOT_TREE_STABLE_TIMER,
                                     builderNames=[config.BUILD_MASTER]),
]

#####
# Define factories (what to do exactly during the build)
#####
build_factory = util.BuildFactory()
build_factory.addStep(steps.Git(repourl=f"{config.REPO_URL}.git", mode='full', method='clobber', submodules=True))
build_factory.addStep(steps.ShellCommand(name="compile", command=["g++", "main.cpp", "-o", "main.out"]))
build_factory.addStep(steps.ShellCommand(name="start binary", command=["./main.out"]))

#####
# Builders
#####
c["builders"] = [
    util.BuilderConfig(name=config.BUILD_MASTER,
                       workernames=list(config.WORKERS[config.BUILD].keys()),
                       factory=build_factory),
]

# Push status of build to the Github
c["services"] = [
    reporters.GitHubStatusPush(token=config.GITHUB_TOKEN,
                               context=util.Interpolate("buildbot/%(prop:buildername)s"),
                               startDescription="Started",
                               endDescription="Done",
                               verbose=True)
]

c["change_source"] = []
c["change_source"].append(GitPoller(
    repourl=f"{config.REPO_URL}.git",
    workdir="gitpoller-workdir", # Dir for the output of git remote-ls command
    branches=True, # Poll all branches
    category="our_project",
    pollInterval=config.POLL_INTERVAL,
    pollAtLaunch=True))

#####
# Basic config
#####
c["buildbotNetUsageData"] = config.BUILDBOT_NET_USAGE_DATA
c["title"] = config.BUILDBOT_TITLE
c["titleURL"] = config.REPO_URL
c["buildbotURL"] = config.BUILDBOT_URL
c["www"] = dict(port=int(config.PORT),
                plugins={"console_view": True}) # Web Interface
c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
c["collapseRequests"] = False # It disables automatic merging of requests
                              # (to build EACH commit)

